name: Project2 CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compile ftlmgr
        run: gcc -std=c11 -Wall -Wextra -o a.out ftlmgr.c fdevicedriver.c

  basic-functionality-test:
    needs: build  # build job이 완료된 후 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compile ftlmgr
        run: gcc -std=c11 -Wall -Wextra -o a.out ftlmgr.c fdevicedriver.c

      - name: Test create flash file
        run: |
          ./a.out c flashmemory 2
          test -f flashmemory || (echo "Flash file not created" && exit 1)
          expected=$((2*8*(512+16)))
          actual=$(stat -c%s flashmemory)
          [ "$actual" -eq "$expected" ] || (echo "Size mismatch: expected $expected, got $actual" && exit 1)

      - name: Test case 1 write hello read 100
        run: |
          ./a.out w flashmemory 1 "hello" "100"
          output=$(./a.out r flashmemory 1)
          expected="hello 100"
          if [ "$output" != "$expected" ]; then
            echo "Test case 1 failed: expected '$expected', got '$output'"
            exit 1
          fi

      - name: Test case 2 write abcde read 0
        run: |
          ./a.out w flashmemory 2 "abcde" "0"
          output=$(./a.out r flashmemory 2)
          expected="abcde 0"
          if [ "$output" != "$expected" ]; then
            echo "Test case 2 failed: expected '$expected', got '$output'"
            exit 1
          fi

      - name: Test case 3 write data read 999
        run: |
          ./a.out w flashmemory 3 "data" "999"
          output=$(./a.out r flashmemory 3)
          expected="data 999"
          if [ "$output" != "$expected" ]; then
            echo "Test case 3 failed: expected '$expected', got '$output'"
            exit 1
          fi

      - name: Test case 4 write longerTestString read 123456
        run: |
          ./a.out w flashmemory 4 "longerTestString" "123456"
          output=$(./a.out r flashmemory 4)
          expected="longerTestString 123456"
          if [ "$output" != "$expected" ]; then
            echo "Test case 4 failed: expected '$expected', got '$output'"
            exit 1
          fi

      - name: Test write to block 1 page 0 (ppn=8)
        run: ./a.out w flashmemory 8 "data8" "20"

      - name: Test verify write to ppn=8
        run: |
          output=$(./a.out r flashmemory 8)
          expected="data8 20"
          if [ "$output" != "$expected" ]; then
            echo "Write to ppn=8 failed: expected '$expected', got '$output'"
            exit 1
          fi

  erase-functionality-test:
    needs: build  # build job이 완료된 후 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compile ftlmgr
        run: gcc -std=c11 -Wall -Wextra -o a.out ftlmgr.c fdevicedriver.c

      - name: Setup flash file
        run: ./a.out c flashmemory 2

      - name: Write data for erase test
        run: |
          ./a.out w flashmemory 1 "hello" "100"
          ./a.out w flashmemory 8 "data8" "20"

      - name: Test erase block 0
        run: ./a.out e flashmemory 0

      - name: Test verify ppn=0 is erased
        run: |
          output=$(./a.out r flashmemory 0)
          expected=""
          if [ "$output" != "$expected" ]; then
            echo "After erase, ppn=0 not erased: expected '$expected', got '$output'"
            exit 1
          fi

      - name: Test verify ppn=8 is preserved after block 0 erase
        run: |
          output=$(./a.out r flashmemory 8)
          expected="data8 20"
          if [ "$output" != "$expected" ]; then
            echo "After erase, ppn=8 changed: expected '$expected', got '$output'"
            exit 1
          fi

      - name: Test verify ppn=1 is erased
        run: |
          output=$(./a.out r flashmemory 1)
          expected=""
          if [ "$output" != "$expected" ]; then
          echo "After erase, ppn=1 not erased: expected '$expected', got '$output'"
          exit 1
          fi

  in-place-update-test:
    needs: build  # build job이 완료된 후 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compile ftlmgr
        run: gcc -std=c11 -Wall -Wextra -o a.out ftlmgr.c fdevicedriver.c

      - name: Setup flash file
        run: ./a.out c flashmemory 2

      - name: Test in-place update - update different page
        run: |
          ./a.out w flashmemory 15 "firstData" "100"
          output=$(./a.out u flashmemory 15 "secondData" "200")
          echo "In-place update output:" $output
          result=$(./a.out r flashmemory 15)
          expected="secondData 200"
          if [ "$result" != "$expected" ]; then
            echo "Test failed for in-place update on different page: expected '$expected', got '$result'"
            exit 1
          fi

      - name: Test in-place update - consecutive updates on same page
        run: |
          ./a.out w flashmemory 5 "alpha" "1"
          output1=$(./a.out u flashmemory 5 "beta" "2")
          echo "First update output:" $output1
          output2=$(./a.out u flashmemory 5 "gamma" "3")
          echo "Second update output:" $output2
          result=$(./a.out r flashmemory 5)
          expected="gamma 3"
          if [ "$result" != "$expected" ]; then
            echo "Test failed for consecutive in-place updates: expected '$expected', got '$result'"
            exit 1
          fi

      - name: Test in-place update - update same page
        run: |
          ./a.out w flashmemory 7 "initData" "10"
          output=$(./a.out u flashmemory 7 "updatedData" "20")
          echo "In-place update output:" $output
          result=$(./a.out r flashmemory 7)
          expected="updatedData 20"
          if [ "$result" != "$expected" ]; then
            echo "Test failed for in-place update on same page: expected '$expected', got '$result'"
            exit 1
          fi

  continuous-read-write-update-test:
    needs: build  # build job 완료 후 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compile ftlmgr
        run: gcc -std=c11 -Wall -Wextra -o a.out ftlmgr.c fdevicedriver.c

      - name: Create flashmemory emulator
        run: |
          # create_flashmemory_emulator 명령어로 flashmemory emulator 생성 (여기서는 기존의 c 명령어 대신 사용)
          ./a.out create_flashmemory_emulator flashmemory 2

      - name: Verify initial state (should be empty)
        run: |
          output=$(./a.out r flashmemory 1)
          expected=""
          if [ "$output" != "$expected" ]; then
            echo "Initial read failed: expected empty output, got '$output'"
            exit 1
          fi

      - name: Write data and verify read
        run: |
          ./a.out w flashmemory 1 "hello" "100"
          output=$(./a.out r flashmemory 1)
          expected="hello 100"
          if [ "$output" != "$expected" ]; then
            echo "Write test failed: expected '$expected', got '$output'"
            exit 1
          fi

      - name: In-place update and verify read
        run: |
          ./a.out u flashmemory 1 "updatedHello" "200"
          output=$(./a.out r flashmemory 1)
          expected="updatedHello 200"
          if [ "$output" != "$expected" ]; then
            echo "In-place update test failed: expected '$expected', got '$output'"
            exit 1
          fi

      - name: Continuous read test
        run: |
          # 연속적으로 읽어들여 상태 확인
          for i in {1..3}; do
            output=$(./a.out r flashmemory 1)
            echo "Read iteration $i: $output"
            sleep 1
          done

  continuous-ftl-event-test:
    needs: build  # build job 완료 후 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compile ftlmgr
        run: gcc -std=c11 -Wall -Wextra -o a.out ftlmgr.c fdevicedriver.c

      - name: Create flashmemory emulator
        run: ./a.out c flashmemory 2

      - name: Simulate continuous FTL events
        run: |
          for i in {1..5}; do
            echo "Iteration $i: Write event"
            ./a.out w flashmemory 1 "data${i}" "$((100*i))"
            output=$(./a.out r flashmemory 1)
            expected="data${i} $((100*i))"
            if [ "$output" != "$expected" ]; then
              echo "Write event failed at iteration $i: expected '$expected', got '$output'"
              exit 1
            fi
            sleep 1

            echo "Iteration $i: Update event"
            ./a.out u flashmemory 1 "udata${i}" "$((200*i))"
            output=$(./a.out r flashmemory 1)
            expected="udata${i} $((200*i))"
            if [ "$output" != "$expected" ]; then
              echo "Update event failed at iteration $i: expected '$expected', got '$output'"
              exit 1
            fi
            sleep 1

            echo "Iteration $i: Erase event"
            ./a.out e flashmemory 0
            output=$(./a.out r flashmemory 1)
            if [ -n "$output" ]; then
              echo "Erase event failed at iteration $i: expected empty output, got '$output'"
              exit 1
            fi
            sleep 1

            echo "Iteration $i: Restore state with Write event"
            ./a.out w flashmemory 1 "data${i}" "$((100*i))"
            output=$(./a.out r flashmemory 1)
            expected="data${i} $((100*i))"
            if [ "$output" != "$expected" ]; then
              echo "Restore write failed at iteration $i: expected '$expected', got '$output'"
              exit 1
            fi
            sleep 1
          done
