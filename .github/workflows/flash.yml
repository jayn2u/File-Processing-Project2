name: 한금준의 Flash Device Driver 빌드 및 테스트

on:
  push:
    branches: [ main, rethink ]
  pull_request:
    branches: [ main, rethink ]

jobs:
  flash_emulator:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        blocks: [5, 10, 15]
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: 기본 GCC를 사용하여 ftlmgr.c와 fdevicedriver.c 컴파일
        run: gcc -o a.out ftlmgr.c fdevicedriver.c

      - name: "Flash Memory Emulator 생성 테스트 (블록 수: ${{ matrix.blocks }})"
        run: |
          filename="flashmemory_${{ matrix.blocks }}"
          ./a.out c $filename ${{ matrix.blocks }}
          if [ ! -f "$filename" ]; then
            echo "$filename 파일 생성 실패"
            exit 1
          fi
          expected=$(( ${{ matrix.blocks }} * 8 * (512 + 16) ))
          size=$(stat -c %s "$filename")
          if [ "$size" -ne "$expected" ]; then
            echo "$filename 파일 크기 오류: 예상 $expected 바이트, 실제 $size 바이트"
            exit 1
          fi
          echo "$filename 생성 성공."

  page_write:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        page: [0, 5, 79]       # 첫 페이지, 중간 페이지, 마지막 페이지 테스트
        sectordata: ["DATA1", "DATA2", "DATA3"]
        sparedata: ["10", "20", "30"]
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
      
      - name: 기본 GCC를 사용하여 ftlmgr.c와 fdevicedriver.c 컴파일
        run: gcc -o a.out ftlmgr.c fdevicedriver.c

      - name: Flash Memory 파일 생성 (테스트 사전 준비)
        run: ./a.out c flashmemory 10

      - name: "페이지 쓰기 테스트 (페이지: ${{ matrix.page }})"
        run: |
          ./a.out w flashmemory ${{ matrix.page }} "${{ matrix.sectordata }}" "${{ matrix.sparedata }}"
          echo "페이지 ${{ matrix.page }}에 데이터 쓰기 완료."

  page_read:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
      
      - name: 기본 GCC를 사용하여 ftlmgr.c와 fdevicedriver.c 컴파일
        run: gcc -o a.out ftlmgr.c fdevicedriver.c

      - name: Flash Memory 파일 생성 및 데이터 기록
        run: |
          ./a.out c flashmemory 10
          ./a.out w flashmemory 5 "abcd12345@%$" "12"

      - name: 페이지 읽기 테스트
        run: |
          output=$(./a.out r flashmemory 5)
          echo "읽기 출력 (ppn=5): $output"
          if [[ "$output" != *"abcd12345@%$"* || "$output" != *"12"* ]]; then
            echo "페이지 읽기 테스트 실패."
            exit 1
          fi
          # 추가 테스트: 작성되지 않은 페이지(예: ppn=3)는 빈 출력이어야 함.
          output_empty=$(./a.out r flashmemory 3)
          if [ -n "$output_empty" ]; then
            echo "미작성 페이지 읽기 테스트 실패: 예상 빈 출력."
            exit 1
          fi
          echo "페이지 읽기 테스트 성공."

  block_erase:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
      
      - name: 기본 GCC를 사용하여 ftlmgr.c와 fdevicedriver.c 컴파일
        run: gcc -o a.out ftlmgr.c fdevicedriver.c

      - name: Flash Memory 파일 생성 및 사전 데이터 기록
        run: |
          ./a.out c flashmemory 10
          # 블록 3(즉, 4번째 블록)의 첫 페이지(ppn=24)와 두 번째 페이지(ppn=25)에 데이터 기록
          ./a.out w flashmemory 24 "testdata1" "0"
          ./a.out w flashmemory 25 "testdata2" "0"

      - name: 블록 소거 테스트
        run: |
          ./a.out e flashmemory 3
          erase_output1=$(./a.out r flashmemory 24)
          erase_output2=$(./a.out r flashmemory 25)
          if [ -n "$erase_output1" ] || [ -n "$erase_output2" ]; then
            echo "블록 소거 테스트 실패: 소거된 페이지에 데이터가 남아 있음."
            exit 1
          fi
          echo "블록 소거 테스트 성공."

  in_place_update:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        updateParams:
          - { ppn: 11, sectordata: "abcd6789@%$", sparedata: "30" }
          - { ppn: 11, sectordata: "SECOND_UPDATE", sparedata: "40" }
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3
      
      - name: 기본 GCC를 사용하여 ftlmgr.c와 fdevicedriver.c 컴파일
        run: gcc -o a.out ftlmgr.c fdevicedriver.c

      - name: Flash Memory 파일 생성 및 초기 데이터 기록
        run: |
          ./a.out c flashmemory 10
          ./a.out w flashmemory 11 "initial" "0"

      - name: "In-place update 테스트 (ppn: ${{ matrix.updateParams.ppn }})"
        run: |
          update_output=$(./a.out u flashmemory ${{ matrix.updateParams.ppn }} "${{ matrix.updateParams.sectordata }}" "${{ matrix.updateParams.sparedata }}")
          echo "In-place update 출력: $update_output"
          if [[ "$update_output" != *"#reads="* || "$update_output" != *"#writes="* || "$update_output" != *"#erases="* ]]; then
            echo "In-place update 테스트 실패."
            exit 1
          fi
          echo "In-place update 테스트 성공."

  additional_tests:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: 기본 GCC를 사용하여 ftlmgr.c와 fdevicedriver.c 컴파일
        run: gcc -o a.out ftlmgr.c fdevicedriver.c

      - name: Flash Memory Emulator 추가 테스트 (1 블록)
        run: |
          ./a.out c flashmemory_single 1
          if [ ! -f flashmemory_single ]; then
            echo "flashmemory_single 파일 생성 실패"
            exit 1
          fi
          expected=$(( 1 * 8 * (512 + 16) ))
          size=$(stat -c %s flashmemory_single)
          if [ "$size" -ne "$expected" ]; then
            echo "flashmemory_single 파일 크기 오류: 예상 $expected 바이트, 실제 $size 바이트"
            exit 1
          fi
          echo "flashmemory_single 생성 성공."

      - name: 페이지 쓰기 추가 테스트 (첫 페이지 및 마지막 페이지)
        run: |
          ./a.out c flashmemory 10
          # 첫 페이지(ppn=0) 테스트
          ./a.out w flashmemory 0 "FIRST_PAGE" "100"
          output0=$(./a.out r flashmemory 0)
          if [[ "$output0" != *"FIRST_PAGE"* || "$output0" != *"100"* ]]; then
            echo "첫 페이지 쓰기 테스트 실패."
            exit 1
          fi
          # 마지막 페이지(ppn=79) 테스트
          ./a.out w flashmemory 79 "LAST_PAGE" "200"
          output79=$(./a.out r flashmemory 79)
          if [[ "$output79" != *"LAST_PAGE"* || "$output79" != *"200"* ]]; then
            echo "마지막 페이지 쓰기 테스트 실패."
            exit 1
          fi
          echo "첫 페이지 및 마지막 페이지 쓰기 테스트 성공."

      - name: 읽기 추가 테스트 (미작성 페이지 빈 출력 확인)
        run: |
          ./a.out c flashmemory 10
          output=$(./a.out r flashmemory 7)
          if [ -n "$output" ]; then
            echo "미작성 페이지 읽기 테스트 실패: 예상 빈 출력."
            exit 1
          fi
          echo "미작성 페이지 읽기 테스트 성공."

      - name: 블록 소거 추가 테스트 (동일 블록 내 여러 페이지)
        run: |
          ./a.out c flashmemory 10
          # 블록 2 (ppn 16~23)에서 두 페이지에 데이터 기록
          ./a.out w flashmemory 16 "BLOCK2_PAGE1" "10"
          ./a.out w flashmemory 17 "BLOCK2_PAGE2" "20"
          # 블록 소거: 블록 번호 2
          ./a.out e flashmemory 2
          output16=$(./a.out r flashmemory 16)
          output17=$(./a.out r flashmemory 17)
          if [ -n "$output16" ] || [ -n "$output17" ]; then
            echo "블록 소거 추가 테스트 실패."
            exit 1
          fi
          echo "블록 소거 추가 테스트 성공."

      - name: In-place update 추가 테스트 (여러 번 갱신)
        run: |
          ./a.out c flashmemory 10
          ./a.out w flashmemory 11 "initial" "0"
          # 첫 번째 갱신
          out1=$(./a.out u flashmemory 11 "UPDATE1" "30")
          # 두 번째 갱신
          out2=$(./a.out u flashmemory 11 "UPDATE2" "40")
          if [[ "$out2" != *"#reads="* || "$out2" != *"#writes="* || "$out2" != *"#erases="* ]]; then
            echo "In-place update 추가 테스트 실패."
            exit 1
          fi
          echo "In-place update 추가 테스트 성공."
  additional_tests_1:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: 기본 GCC를 사용하여 ftlmgr.c와 fdevicedriver.c 컴파일
        run: |
          gcc -o a.out ftlmgr.c fdevicedriver.c

      - name: Flash Memory 생성 및 경계 테스트
        run: |
          # 1. 플래시 메모리 생성: 5 블록 사용
          ./a.out c flashmemory_test 5
          if [ ! -f flashmemory_test ]; then
            echo "테스트 실패: flashmemory_test 파일이 생성되지 않음."
            exit 1
          fi
          # 5 블록 * 8페이지 * (512+16)바이트
          expected=$((5*8*(512+16)))
          actual=$(stat -c %s flashmemory_test)
          if [ "$actual" -ne "$expected" ]; then
            echo "경계 테스트 실패: 예상 파일 크기 $expected, 실제 $actual"
            exit 1
          fi
          echo "파일 생성 및 크기 경계 테스트 통과."

      - name: 읽지 않은 페이지 읽기 테스트
        run: |
          # 아직 쓰지 않은 페이지(예: 0번 페이지)는 의미있는 데이터가 없어야 함.
          output=$(./a.out r flashmemory_test 0)
          if [ -n "$output" ]; then
            echo "읽지 않은 페이지에서 데이터가 읽힘: 테스트 실패."
            exit 1
          fi
          echo "읽지 않은 페이지 읽기 테스트 통과."

      - name: 중복 페이지 쓰기 실패 테스트
        run: |
          # 1번 페이지에 데이터 기록
          ./a.out w flashmemory_test 1 "testdata" "99"
          # 동일한 페이지(1번)에 다시 쓰기 시도 -> 실패해야 함.
          if ./a.out w flashmemory_test 1 "newdata" "100"; then
            echo "중복 페이지 쓰기 테스트 실패: 덮어쓰기가 허용됨."
            exit 1
          else
            echo "중복 페이지 쓰기 테스트 통과."
          fi

      - name: 연속 페이지 쓰기 및 읽기 테스트
        run: |
          # 2번, 3번, 4번 페이지에 각기 다른 데이터 기록
          ./a.out w flashmemory_test 2 "data2" "20"
          ./a.out w flashmemory_test 3 "data3" "30"
          ./a.out w flashmemory_test 4 "data4" "40"
          # 각 페이지 읽어 결과 검증
          out2=$(./a.out r flashmemory_test 2)
          out3=$(./a.out r flashmemory_test 3)
          out4=$(./a.out r flashmemory_test 4)
          if [[ "$out2" != *"data2"* || "$out2" != *"20"* ]]; then
            echo "페이지 2 읽기 테스트 실패."
            exit 1
          fi
          if [[ "$out3" != *"data3"* || "$out3" != *"30"* ]]; then
            echo "페이지 3 읽기 테스트 실패."
            exit 1
          fi
          if [[ "$out4" != *"data4"* || "$out4" != *"40"* ]]; then
            echo "페이지 4 읽기 테스트 실패."
            exit 1
          fi
          echo "연속 페이지 쓰기 및 읽기 테스트 통과."

