name: ÌååÏ≤ò Îëê Î≤àÏß∏ Í≥ºÏ†ú CI

on:
  push:
    branches:
      - feat/*
      - test
      - main

jobs:
  project2-test:
    runs-on: ubuntu-22.04

    steps:
      - name: Ï†ÄÏû•ÏÜå Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: C Ïª¥ÌååÏùºÎü¨ ÏÑ§Ïπò
        run: sudo apt update && sudo apt install -y gcc

      - name: flashmemory ÏÉùÏÑ± ÌÖåÏä§Ìä∏
        run: |
          gcc -o a.out ftlmgr.c fdevicedriver.c
          
          echo "Ïª¥ÌååÏùº ÏôÑÎ£å"
          file a.out
          
          for BLOCKS in 1 5 10 20; do
            echo "‚úÖ Î∏îÎ°ù Ïàò $BLOCKSÎ°ú flashmemory ÏÉùÏÑ± ÌÖåÏä§Ìä∏"
            rm -f flashmemory  # Ïù¥Ï†Ñ ÌååÏùº ÏÇ≠Ï†ú
            ./a.out c flashmemory $BLOCKS
          
            EXPECTED_SIZE=$((BLOCKS * 8 * 528))
            FILESIZE=$(stat --format=%s flashmemory)
          
            echo "flashmemory ÌÅ¨Í∏∞: $FILESIZE Î∞îÏù¥Ìä∏ (ÏòàÏÉÅ: $EXPECTED_SIZE Î∞îÏù¥Ìä∏)"
          
            if [ "$FILESIZE" -ne "$EXPECTED_SIZE" ]; then
              echo "‚ùå Ïã§Ìå®: ÏòàÏÉÅ $EXPECTED_SIZE Î∞îÏù¥Ìä∏, Ïã§Ï†ú $FILESIZE Î∞îÏù¥Ìä∏"
              exit 1
            else
              echo "‚úÖ ÏÑ±Í≥µ: ÌÅ¨Í∏∞ ÏùºÏπò ($EXPECTED_SIZE Î∞îÏù¥Ìä∏)"
            fi
          
            echo ""
          done

      - name: write Î™ÖÎ†π ÌÖåÏä§Ìä∏
        run: |
          gcc -o a.out ftlmgr.c fdevicedriver.c

          # Step 2: ÌéòÏù¥ÏßÄ 2Î≤àÏóê Ïì∞Í∏∞
          ./a.out w flashmemory 2 "helloCI" "123"

          # Step 3: Ìï¥Îãπ ÏúÑÏπò ÏùΩÏñ¥ÏÑú Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
          OFFSET=$((2 * 528))
          hexdump -C -n 16 -s $OFFSET flashmemory > written.txt
          grep -q "68 65 6c 6c 6f 43 49" written.txt && echo "‚úÖ write ÏÑ±Í≥µ" || (echo "‚ùå write Ïã§Ìå®" && exit 1)

          # Step 4: Í∞ôÏùÄ ÏúÑÏπòÏóê Îã§Ïãú Ïì∞Í∏∞ ÏãúÎèÑ (Í±∞Î∂ÄÎêòÏñ¥Ïïº Ìï®)
          ./a.out w flashmemory 2 "overwrite" "456" > try.txt

          # Step 5: ÎçÆÏñ¥Ïì∞Í∏∞ Ïïà Îêú Í≤É ÌôïÏù∏
          hexdump -C -n 16 -s $OFFSET flashmemory > written2.txt
          grep -q "helloCI" written2.txt && echo "‚úÖ ÎçÆÏñ¥Ïì∞Í∏∞ Î∞©ÏßÄ ÌôïÏù∏" || (echo "‚ùå ÎçÆÏñ¥Ïì∞Í∏∞ Î∞©ÏßÄ Ïã§Ìå®" && exit 1)

          # Ï†ïÎ¶¨
          rm -f flashmemory written.txt written2.txt try.txt

      - name: read Î™ÖÎ†π ÌÖåÏä§Ìä∏
        run: |
          gcc -o a.out ftlmgr.c fdevicedriver.c
          
          # ÌÖåÏä§Ìä∏ 1: Ï†ïÏÉÅÏ†ÅÏù∏ ÏùΩÍ∏∞
          ./a.out w flashmemory 2 "abcd12345@%$" "12"
          ./a.out r flashmemory 2 > r1.txt
          grep -q "abcd12345@%$ 12" r1.txt && echo "‚úÖ read ÌÖåÏä§Ìä∏ 1 ÌÜµÍ≥º" || (echo "‚ùå read ÌÖåÏä§Ìä∏ 1 Ïã§Ìå®" && cat r1.txt && exit 1)
          rm flashmemory

          # ÌÖåÏä§Ìä∏ 2: sectorÍ∞Ä ÎπÑÏñ¥ ÏûàÏúºÎ©¥ Ï∂úÎ†• Ïïà Ìï®
          ./a.out w flashmemory 2 "" "12"
          ./a.out r flashmemory 2 > r2.txt
          [ ! -s r2.txt ] && echo "‚úÖ read ÌÖåÏä§Ìä∏ 2 ÌÜµÍ≥º" || (echo "‚ùå read ÌÖåÏä§Ìä∏ 2 Ïã§Ìå® (Ï∂úÎ†• ÏûàÏùå)" && cat r2.txt && exit 1)
          rm flashmemory

          # ÌÖåÏä§Ìä∏ 3: ÏôÑÏ†Ñ Îπà ÌéòÏù¥ÏßÄ (ÏïÑÎ¨¥Í≤ÉÎèÑ Ïïà ÏîÄ)
          ./a.out c flashmemory 4
          ./a.out r flashmemory 4 > r3.txt
          [ ! -s r3.txt ] && echo "‚úÖ read ÌÖåÏä§Ìä∏ 3 ÌÜµÍ≥º" || (echo "‚ùå read ÌÖåÏä§Ìä∏ 3 Ïã§Ìå® (Ï∂úÎ†• ÏûàÏùå)" && cat r3.txt && exit 1)

          # ÌÖåÏä§Ìä∏ 4: ÎçÆÏñ¥Ïì∞Í∏∞ Î∞©ÏßÄÎêú ÌéòÏù¥ÏßÄ ÏùΩÍ∏∞
          ./a.out w flashmemory 5 "firstdata" "55"
          ./a.out w flashmemory 5 "second" "99"  # Î¨¥ÏãúÎèºÏïº Ìï®
          ./a.out r flashmemory 5 > r4.txt
          # "firstdata 55"Í∞Ä Ï∂úÎ†•Ïóê Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
          grep -q "firstdata 55" r4.txt && echo "‚úÖ read ÌÖåÏä§Ìä∏ 4 ÌÜµÍ≥º" || (echo "‚ùå read ÌÖåÏä§Ìä∏ 4 Ïã§Ìå®" && cat r4.txt && exit 1)

          # Ï†ïÎ¶¨
          rm -f flashmemory r1.txt r2.txt r3.txt r4.txt

      - name: erase Î™ÖÎ†π ÌÖåÏä§Ìä∏
        run: |
          gcc -o a.out ftlmgr.c fdevicedriver.c
          # Step 1: ÌîåÎûòÏãú ÏÉùÏÑ± (1 Î∏îÎ°ù = 8 ÌéòÏù¥ÏßÄ)
          ./a.out c flashmemory 1

          # Step 2: ÌéòÏù¥ÏßÄÏóê Îç∞Ïù¥ÌÑ∞ ÏûëÏÑ± (ppn = 4Îäî block 0Ïóê ÏÜçÌï®)
          ./a.out w flashmemory 4 "beforeErase" "999"
          ./a.out r flashmemory 4 > before.txt
          grep -q "beforeErase 999" before.txt && echo "‚úÖ erase Ï†Ñ Ïì∞Í∏∞ ÌôïÏù∏" || (echo "‚ùå Ïì∞Í∏∞ Ïã§Ìå®" && cat before.txt && exit 1)

          # Step 3: Î∏îÎ°ù 0 ÏÜåÍ±∞
          ./a.out e flashmemory 0

          # Step 4: ÏÜåÍ±∞Îêú ÌéòÏù¥ÏßÄÎäî Ï∂úÎ†• ÏóÜÏñ¥Ïïº Ìï® (sector, spare Î™®Îëê ÏßÄÏõåÏ°åÎäîÏßÄ)
          ./a.out r flashmemory 4 > after.txt
          [ ! -s after.txt ] && echo "‚úÖ erase ÌõÑ ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî ÌôïÏù∏" || (echo "‚ùå erase Ïã§Ìå® (Îç∞Ïù¥ÌÑ∞ ÎÇ®Ïùå)" && cat after.txt && exit 1)

          # Ï†ïÎ¶¨
          rm -f flashmemory before.txt after.txt

      - name: update Î™ÖÎ†π Îã§ÏñëÌïú ÏºÄÏù¥Ïä§ ÌÖåÏä§Ìä∏
        run: |
          gcc -o a.out ftlmgr.c fdevicedriver.c
          #########################################
          echo "üß™ T1. Í∏∞Î≥∏ update ÎèôÏûë ÌÖåÏä§Ìä∏"
          ./a.out c flashmemory 3
          ./a.out w flashmemory 11 "old" "11"
          ./a.out u flashmemory 11 "newData!" "99" > log1.txt
          ./a.out r flashmemory 11 > out1.txt
          grep -q "newData! 99" out1.txt && echo "‚úÖ T1 ÌÜµÍ≥º" || (echo "‚ùå T1 Ïã§Ìå®" && cat out1.txt && exit 1)

          #########################################
          echo "üß™ T2. Í∞ôÏùÄ ÌéòÏù¥ÏßÄÏóê Îëê Î≤à Ïó∞ÏÜç update"
          ./a.out u flashmemory 11 "second" "88" > log2.txt
          ./a.out r flashmemory 11 > out2.txt
          grep -q "second 88" out2.txt && echo "‚úÖ T2 ÌÜµÍ≥º" || (echo "‚ùå T2 Ïã§Ìå®" && cat out2.txt && exit 1)

          #########################################
          echo "üß™ T3. ÎÇòÎ®∏ÏßÄ ÌéòÏù¥ÏßÄ Î≥¥Ï°¥ ÌôïÏù∏"
          ./a.out w flashmemory 10 "stay" "22"
          ./a.out u flashmemory 11 "final!" "44"
          ./a.out r flashmemory 10 > out3.txt
          grep -q "stay 22" out3.txt && echo "‚úÖ T3 ÌÜµÍ≥º" || (echo "‚ùå T3 Ïã§Ìå® - Îã§Î•∏ ÌéòÏù¥ÏßÄ ÏÜêÏã§" && cat out3.txt && exit 1)

          #########################################
          echo "üß™ T5. sectorÎäî Í∑∏ÎåÄÎ°ú, spareÎßå Î≥ÄÍ≤Ω"
          ./a.out c flashmemory 3
          ./a.out w flashmemory 9 "constant" "33"
          ./a.out u flashmemory 9 "constant" "77"
          ./a.out r flashmemory 9 > out5.txt
          grep -q "constant 77" out5.txt && echo "‚úÖ T5 ÌÜµÍ≥º" || (echo "‚ùå T5 Ïã§Ìå® - spare Î≥ÄÍ≤Ω Ïïà Îê®" && cat out5.txt && exit 1)

          #########################################
          echo "üßπ ÌÖåÏä§Ìä∏ Ï¢ÖÎ£å ÌõÑ Ï†ïÎ¶¨"
          rm -f flashmemory out*.txt log*.txt

      - name: Ï∂îÍ∞Ä ÌÖåÏä§Ìä∏
        run: |
          gcc -o a.out ftlmgr.c fdevicedriver.c

          echo "üß™ T6. write ‚Üí read ‚Üí erase ‚Üí read: ÌéòÏù¥ÏßÄ ÏôÑÏ†Ñ Ï¥àÍ∏∞Ìôî ÌôïÏù∏"
          ./a.out c flashmemory 2
          ./a.out w flashmemory 4 "eraseCheck" "55"
          ./a.out r flashmemory 4 > beforeErase.txt
          grep -q "eraseCheck 55" beforeErase.txt || (echo "‚ùå T6 Ïã§Ìå® - write ÎòêÎäî read Ïã§Ìå®" && cat beforeErase.txt && exit 1)
          ./a.out e flashmemory 0
          ./a.out r flashmemory 4 > afterErase.txt
          [ ! -s afterErase.txt ] && echo "‚úÖ T6 ÌÜµÍ≥º" || (echo "‚ùå T6 Ïã§Ìå® - erase ÌõÑÏóêÎèÑ Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨" && cat afterErase.txt && exit 1)

          echo "üß™ T7. ÏµúÎåÄ ÌéòÏù¥ÏßÄ Î≤àÌò∏(ppn = 8*block - 1)Ïóê Ïì∞Í≥† ÏùΩÍ∏∞"
          ./a.out c flashmemory 3
          MAX_PPN=$((8*3 - 1))
          ./a.out w flashmemory $MAX_PPN "maxPage" "77"
          ./a.out r flashmemory $MAX_PPN > out7.txt
          grep -q "maxPage 77" out7.txt && echo "‚úÖ T7 ÌÜµÍ≥º" || (echo "‚ùå T7 Ïã§Ìå® - ÏµúÎåÄ ÌéòÏù¥ÏßÄ Ï≤òÎ¶¨ Ïã§Ìå®" && cat out7.txt && exit 1)

          echo "üß™ T8. update Ïãú Îπà Î∏îÎ°ùÏùÑ Ï†úÎåÄÎ°ú ÌÉêÏÉâÌñàÎäîÏßÄ ÌôïÏù∏"
          ./a.out c flashmemory 5
          ./a.out w flashmemory 8 "original" "88"
          ./a.out u flashmemory 8 "updated" "99"
          ./a.out r flashmemory 8 > out8.txt
          grep -q "updated 99" out8.txt && echo "‚úÖ T8 ÌÜµÍ≥º" || (echo "‚ùå T8 Ïã§Ìå® - update Ïã§Ìå®" && cat out8.txt && exit 1)

          echo "üß™ T9. update Í≥ºÏ†ï Ï§ë Îã§Î•∏ ÌéòÏù¥ÏßÄÍ∞Ä Î≥¥Ï°¥ÎêòÎäîÏßÄ Í≤ÄÏ¶ù"
          ./a.out c flashmemory 4
          ./a.out w flashmemory 15 "preserved" "15"
          ./a.out w flashmemory 16 "toupdate" "16"
          ./a.out u flashmemory 16 "changed" "77"
          ./a.out r flashmemory 15 > out9.txt
          grep -q "preserved 15" out9.txt && echo "‚úÖ T9 ÌÜµÍ≥º" || (echo "‚ùå T9 Ïã§Ìå® - Î≥¥Ï°¥ÎêòÏßÄ ÏïäÏùå" && cat out9.txt && exit 1)

          echo "üß™ T10. ÏôÑÏ†Ñ Ï¥àÍ∏∞ÌôîÎêú ÌéòÏù¥ÏßÄ ÏùΩÍ∏∞ ‚Üí Ï∂úÎ†• ÏóÜÏùå"
          ./a.out c flashmemory 2
          ./a.out r flashmemory 0 > out10.txt
          [ ! -s out10.txt ] && echo "‚úÖ T10 ÌÜµÍ≥º" || (echo "‚ùå T10 Ïã§Ìå® - Ï¥àÍ∏∞ÌôîÎêú ÌéòÏù¥ÏßÄ Ï∂úÎ†•Îê®" && cat out10.txt && exit 1)

          echo "üß™ T11. spare Îç∞Ïù¥ÌÑ∞Í∞Ä 0Ïùº Îïå Ï†ïÏÉÅ Ï∂úÎ†•ÎêòÎäîÏßÄ ÌôïÏù∏"
          ./a.out c flashmemory 2
          ./a.out w flashmemory 1 "dataZero" "0"
          ./a.out r flashmemory 1 > out11.txt
          grep -q "dataZero 0" out11.txt && echo "‚úÖ T11 ÌÜµÍ≥º" || (echo "‚ùå T11 Ïã§Ìå® - spare=0 Ï∂úÎ†• Ïïà Îê®" && cat out11.txt && exit 1)

          echo "üß™ T12. Ïó∞ÏÜç ÌéòÏù¥ÏßÄ write-read ÌÖåÏä§Ìä∏"
          ./a.out c flashmemory 2
          for i in {0..7}; do
            ./a.out w flashmemory $i "page$i" "$i"
          done
          for i in {0..7}; do
            ./a.out r flashmemory $i > out12_$i.txt
            grep -q "page$i $i" out12_$i.txt || (echo "‚ùå T12 Ïã§Ìå® - ppn $i" && cat out12_$i.txt && exit 1)
          done
          echo "‚úÖ T12 ÌÜµÍ≥º"

          echo "üßπ Ï†ïÎ¶¨"
          rm -f flashmemory beforeErase.txt afterErase.txt out*.txt

      - name: create flash memory
        run: |
          gcc ftlmgr.c fdevicedriver.c -o a.out
          
          for BLOCKS in 5 10 20; do
          FILE="flashmemory_$BLOCKS"
          
          ./a.out c $FILE $BLOCKS
          
          # ÏòàÏÉÅ ÌÅ¨Í∏∞ Í≥ÑÏÇ∞: BLOCKS * 8 * (512 + 16)
          EXPECTED_SIZE=$((BLOCKS * 8 * 528))
          FILESIZE=$(stat --format=%s $FILE)
          
          echo "üìè [$FILE] ÌÅ¨Í∏∞: $FILESIZE Î∞îÏù¥Ìä∏ (ÏòàÏÉÅ: $EXPECTED_SIZE Î∞îÏù¥Ìä∏)"
          
          if [ "$FILESIZE" -ne "$EXPECTED_SIZE" ]; then
          echo "‚ùå ÌååÏùº ÌÅ¨Í∏∞ Ïò§Î•ò: ÏòàÏÉÅ $EXPECTED_SIZE Î∞îÏù¥Ìä∏, Ïã§Ï†ú $FILESIZE Î∞îÏù¥Ìä∏"
          exit 1
          else
          echo "‚úÖ ÌååÏùº ÌÅ¨Í∏∞ Ï†ïÏÉÅ ($EXPECTED_SIZE Î∞îÏù¥Ìä∏)"
          fi
          
          echo ""
          done

      - name: write page
        run: |
          gcc ftlmgr.c fdevicedriver.c -o a.out
          
          #############################
          # TEST 1: ÏùºÎ∞òÏ†ÅÏù∏ Í≤ΩÏö∞
          #############################
          
          ./a.out c flashmemory 10
          ./a.out w flashmemory 5 "abc123!" "42"
          
          dd if=flashmemory bs=528 skip=5 count=1 of=readpage.bin status=none
          
          echo ""
          echo "test 1 Î∂ÑÏÑù"
          
          # ‚úÖ ÏÑπÌÑ∞ Î¨∏ÏûêÏó¥ ÌôïÏù∏ Î∞è Í≤ÄÏÇ¨
          SECTOR_STRING=$(dd if=readpage.bin bs=1 count=512 status=none | strings | head -n 1)
          EXPECTED_SECTOR="abc123!"
          
          if [ "$SECTOR_STRING" != "$EXPECTED_SECTOR" ]; then
          echo "‚ùå ÏÑπÌÑ∞ ÏòÅÏó≠ Î¨∏ÏûêÏó¥ Î∂àÏùºÏπò!"
          echo "   ÏûÖÎ†•Ìïú ÏÑπÌÑ∞ Îç∞Ïù¥ÌÑ∞: $EXPECTED_SECTOR"
          echo "   Ï†ÄÏû•Îêú ÏÑπÌÑ∞ Îç∞Ïù¥ÌÑ∞: $SECTOR_STRING"
          echo "üí• write-page-test 1 ÌÖåÏä§Ìä∏ Ïã§Ìå®!"
          exit 1
          else
          echo "‚úÖ ÏÑπÌÑ∞ ÏòÅÏó≠ Î¨∏ÏûêÏó¥ ÌôïÏù∏ ÏôÑÎ£å: \"$SECTOR_STRING\""
          fi
          
          # ‚úÖ Ïä§ÌéòÏñ¥ ÏòÅÏó≠ Í≤ÄÏÇ¨
          SPARE_HEX=$(xxd -s 512 -l 4 -p readpage.bin)
          EXPECTED_SPARE="2a000000"
          
          if [ "$SPARE_HEX" != "$EXPECTED_SPARE" ]; then
          echo "‚ùå Ïä§ÌéòÏñ¥ ÏòÅÏó≠ binary Í∞íÏù¥ ÏòàÏÉÅÍ≥º Îã§Î¶Ñ! (42 ‚Üí $EXPECTED_SPARE)"
          echo "üí• write-page-test 1 Ïã§Ìå®!"
          exit 1
          else
          echo "‚úÖ Ïä§ÌéòÏñ¥ ÏòÅÏó≠ binary Í∞í ÌôïÏù∏ ÏôÑÎ£å (42 ‚Üí $EXPECTED_SPARE)"
          fi
          
          # ‚úÖ ÏµúÏ¢Ö ÌÜµÍ≥º Î©îÏãúÏßÄ
          echo "üéâ write-page-test 1 ÏÑ±Í≥µ!"
          
          #############################
          # TEST 2: Îπà ÏÑπÌÑ∞ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
          #############################
          ./a.out c flashmemory 10
          ./a.out w flashmemory 6 "" "77"
          
          dd if=flashmemory bs=528 skip=6 count=1 of=readpage2.bin status=none
          
          echo ""
          echo "test 2 Î∂ÑÏÑù (Îπà ÏÑπÌÑ∞)"
          
          SECTOR_BYTES=$(dd if=readpage2.bin bs=1 count=512 status=none | hexdump -v -e '/1 "%02x"')
          
          # Ï†ÑÎ∂Ä 0xFFÏù∏ÏßÄ ÌôïÏù∏
          if [[ "$SECTOR_BYTES" != $(printf 'ff%.0s' {1..512}) ]]; then
          echo "‚ùå ÏÑπÌÑ∞ ÏòÅÏó≠Ïù¥ 0xFFÎ°ú Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏùå!"
          echo "üí• write-page-test 2 Ïã§Ìå®!"
          exit 1
          else
          echo "‚úÖ Îπà ÏÑπÌÑ∞ Îç∞Ïù¥ÌÑ∞ ‚Üí ÏÑπÌÑ∞ ÏòÅÏó≠Ïù¥ 0xFFÎ°ú Ï¥àÍ∏∞ÌôîÎê®"
          fi
          
          SPARE_HEX=$(xxd -s 512 -l 4 -p readpage2.bin)
          if [ "$SPARE_HEX" != "4d000000" ]; then  # 77 = 0x4d = 4d000000 (little endian)
          echo "‚ùå Ïä§ÌéòÏñ¥ Í∞íÏù¥ 77(4d000000)Î°ú Ï†ÄÏû•ÎêòÏßÄ ÏïäÏùå!"
          echo "üí• write-page-test 2 Ïã§Ìå®!"
          exit 1
          else
          echo "‚úÖ Ïä§ÌéòÏñ¥ ÏòÅÏó≠ binary Í∞í ÌôïÏù∏ ÏôÑÎ£å (77 ‚Üí $SPARE_HEX)"
          echo "üéâ write-page-test 2 ÏÑ±Í≥µ!"
          fi
          
          #############################
          # TEST 3: Îπà Ïä§ÌéòÏñ¥ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
          #############################
          ./a.out c flashmemory 10
          ./a.out w flashmemory 7 "xyz!!" ""
          
          dd if=flashmemory bs=528 skip=7 count=1 of=readpage3.bin status=none
          
          echo ""
          echo "test 3 Î∂ÑÏÑù (Îπà Ïä§ÌéòÏñ¥)"
          
          SECTOR_STRING=$(dd if=readpage3.bin bs=1 count=512 status=none | strings | head -n 1)
          EXPECTED_SECTOR="xyz!!"
          
          if [ "$SECTOR_STRING" != "$EXPECTED_SECTOR" ]; then
          echo "‚ùå ÏÑπÌÑ∞ Î¨∏ÏûêÏó¥Ïù¥ ÏòàÏÉÅÍ≥º Îã§Î¶Ñ!"
          echo "üí• write-page-test 3 Ïã§Ìå®!"
          exit 1
          else
          echo "‚úÖ ÏÑπÌÑ∞ Î¨∏ÏûêÏó¥ ÌôïÏù∏ ÏôÑÎ£å: \"$SECTOR_STRING\""
          fi
          
          SPARE_HEX=$(xxd -s 512 -l 4 -p readpage3.bin)
          if [ "$SPARE_HEX" != "00000000" ]; then
          echo "‚ùå Îπà Ïä§ÌéòÏñ¥Îäî 0ÏúºÎ°ú Ï†ÄÏû•ÎêòÏñ¥Ïïº Ìï®! ‚Üí ÌòÑÏû¨ Í∞í: $SPARE_HEX"
          echo "üí• write-page-test 3 Ïã§Ìå®!"
          exit 1
          else
          echo "‚úÖ Îπà Ïä§ÌéòÏñ¥ ‚Üí 0ÏúºÎ°ú Ï†ïÏÉÅ Ï†ÄÏû• (00000000)"
          echo "üéâ write-page-test 3 ÏÑ±Í≥µ!"
          fi
          
          #############################
          # TEST 4: ÏÑπÌÑ∞ + Ïä§ÌéòÏñ¥ Î™®Îëê Îπà Í≤ΩÏö∞
          #############################
          ./a.out c flashmemory 10
          ./a.out w flashmemory 8 "" ""
          
          dd if=flashmemory bs=528 skip=8 count=1 of=readpage4.bin status=none
          
          echo ""
          echo "test 4 Î∂ÑÏÑù (ÏÑπÌÑ∞/Ïä§ÌéòÏñ¥ Î™®Îëê Îπà ÏûÖÎ†•)"
          
          # ÏÑπÌÑ∞ ÏòÅÏó≠ Í≤ÄÏ¶ù (Î™®Îëê 0xFF)
          SECTOR_BYTES=$(dd if=readpage4.bin bs=1 count=512 status=none | hexdump -v -e '/1 "%02x"')
          
          if [[ "$SECTOR_BYTES" != $(printf 'ff%.0s' {1..512}) ]]; then
          echo "‚ùå ÏÑπÌÑ∞ ÏòÅÏó≠Ïù¥ 0xFFÎ°ú Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏùå!"
          echo "üí• write-page-test 4 Ïã§Ìå®!"
          exit 1
          else
          echo "‚úÖ Îπà ÏÑπÌÑ∞ ‚Üí ÏÑπÌÑ∞ ÏòÅÏó≠Ïù¥ 0xFFÎ°ú Ï¥àÍ∏∞ÌôîÎê®"
          fi
          
          # Ïä§ÌéòÏñ¥ ÏòÅÏó≠ Í≤ÄÏ¶ù (0ÏúºÎ°ú Ï†ÄÏû•)
          SPARE_HEX=$(xxd -s 512 -l 4 -p readpage4.bin)
          if [ "$SPARE_HEX" != "00000000" ]; then
          echo "‚ùå Îπà Ïä§ÌéòÏñ¥ ‚Üí 0Ïù¥ Ï†ÄÏû•ÎêòÏßÄ ÏïäÏùå! ÌòÑÏû¨: $SPARE_HEX"
          echo "üí• write-page-test 4 Ïã§Ìå®!"
          exit 1
          else
          echo "‚úÖ Îπà Ïä§ÌéòÏñ¥ ‚Üí 0ÏúºÎ°ú Ï†ïÏÉÅ Ï†ÄÏû•"
          echo "üéâ write-page-test 4 ÏÑ±Í≥µ!"
          fi
          
          #############################
          # TEST 5: Í∏∞Ï°¥ ÌéòÏù¥ÏßÄÏóê ÎçÆÏñ¥Ïì∞Í∏∞ Î∞©ÏßÄ
          #############################
          ./a.out c flashmemory 10
          ./a.out w flashmemory 9 "original" "99"
          
          # Ï≤´ Î≤àÏß∏ Ïì∞Í∏∞ ÌõÑ Í∞í Ï†ÄÏû•
          dd if=flashmemory bs=528 skip=9 count=1 of=before_overwrite.bin status=none
          
          # ÎçÆÏñ¥Ïì∞Í∏∞ ÏãúÎèÑ (Í∞ôÏùÄ ppn = 9)
          ./a.out w flashmemory 9 "newdata" "55"
          
          # Îã§Ïãú ÏùΩÏñ¥ÏÑú ÎπÑÍµê
          dd if=flashmemory bs=528 skip=9 count=1 of=after_overwrite.bin status=none
          
          echo ""
          echo "test 5 Î∂ÑÏÑù (ÎçÆÏñ¥Ïì∞Í∏∞ Î∞©ÏßÄ ÌÖåÏä§Ìä∏)"
          
          # üîç before ÎÇ¥Ïö© Ï∂úÎ†•
          echo "üìÇ BEFORE ÎçÆÏñ¥Ïì∞Í∏∞ ÌéòÏù¥ÏßÄ ÎÇ¥Ïö© (Ïïû 64B)"
          hexdump -C before_overwrite.bin
          
          # üîç after ÎÇ¥Ïö© Ï∂úÎ†•
          echo "üìÇ AFTER ÎçÆÏñ¥Ïì∞Í∏∞ ÌéòÏù¥ÏßÄ ÎÇ¥Ïö© (Ïïû 64B)"
          hexdump -C after_overwrite.bin
          
          # Î∞îÏù¥Ìä∏ Îã®ÏúÑ Í∞í ÎπÑÍµêÎ•º ÏúÑÌï¥ md5 Ìï¥ÏãúÎ°ú ÎπÑÍµê
          HASH1=$(md5sum before_overwrite.bin | cut -d' ' -f1)
          HASH2=$(md5sum after_overwrite.bin | cut -d' ' -f1)
          
          if [ "$HASH1" != "$HASH2" ]; then
          echo "‚ùå Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä Î≥ÄÍ≤ΩÎê®! Ìï¥Ïãú Î∂àÏùºÏπò!"
          echo "üí• write-page-test 5 Ïã§Ìå®!"
          exit 1
          else
          echo "‚úÖ Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä Í∑∏ÎåÄÎ°ú Ïú†ÏßÄÎê® (Ìï¥Ïãú ÏùºÏπò)"
          echo "üéâ write-page-test 5 ÏÑ±Í≥µ!"
          fi

      - name: read page
        run: |
          gcc ftlmgr.c fdevicedriver.c -o a.out
          
          ./a.out c flashmemory 10
          ./a.out w flashmemory 9 "abcd12345@%$" "99"
          READ_OUTPUT=$(./a.out r flashmemory 9)
          
          echo "üì§ [TEST 1] Ï∂úÎ†•: $READ_OUTPUT"
          
          EXPECTED_OUTPUT="abcd12345@%$ 99"
          if [ "$READ_OUTPUT" != "$EXPECTED_OUTPUT" ]; then
          echo "‚ùå Ï∂úÎ†• Î∂àÏùºÏπò!"
          echo "   Í∏∞ÎåÄÍ∞í: $EXPECTED_OUTPUT"
          echo "   Ïã§Ï†úÍ∞í: $READ_OUTPUT"
          exit 1
          else
          echo "‚úÖ Ï∂úÎ†• ÏùºÏπò: $EXPECTED_OUTPUT"
          fi
          
          ./a.out c flashmemory 10
          ./a.out w flashmemory 8 "" "42"
          READ_OUTPUT=$(./a.out r flashmemory 8)
          echo "üì§ [TEST 2] Ï∂úÎ†•: $READ_OUTPUT"
          if [ "$READ_OUTPUT" != "" ]; then
          echo "‚ùå TEST 2 Ïã§Ìå® - Ï∂úÎ†• Î∂àÏùºÏπò (ÏÑπÌÑ∞ ÏóÜÏùå, Ïä§ÌéòÏñ¥ 42)"
          exit 1
          else
          echo "‚úÖ TEST 2 ÌÜµÍ≥º"
          fi
          
          ./a.out c flashmemory 10
          READ_OUTPUT=$(./a.out r flashmemory 7)
          echo "üì§ [TEST 3] Ï∂úÎ†•: $READ_OUTPUT"
          if [ "$READ_OUTPUT" != "" ]; then
          echo "‚ùå TEST 3 Ïã§Ìå® - Ï∂úÎ†• Î∂àÏùºÏπò (Îπà ÌéòÏù¥ÏßÄÎäî ÏïÑÎ¨¥Í≤ÉÎèÑ Ï∂úÎ†•ÌïòÏßÄ ÏïäÏïÑÏïº Ìï®)"
          exit 1
          else
          echo "‚úÖ TEST 3 ÌÜµÍ≥º"
          fi

      - name: erase page
        run: |
          gcc ftlmgr.c fdevicedriver.c -o a.out
          
          ./a.out c flashmemory 10
          ./a.out w flashmemory 24 "erase_test_data" "777"
          ./a.out e flashmemory 3
          
          echo "Î∏îÎ°ù 3Ïùò Î™®Îì† ÌéòÏù¥ÏßÄÍ∞Ä 0xFFÎ°ú Ï¥àÍ∏∞ÌôîÎêêÎäîÏßÄ ÌôïÏù∏"
          # Î∏îÎ°ù 3Ïùò ÌéòÏù¥ÏßÄ Î≤îÏúÑ: ppn 24 ~ 31
          for i in $(seq 24 31); do
          dd if=flashmemory bs=528 skip=$i count=1 of=check_page.bin status=none
          
          # 528Î∞îÏù¥Ìä∏Í∞Ä Î™®Îëê FFÏù∏ÏßÄ Í≤ÄÏÇ¨
          NON_FF_COUNT=$(xxd -p check_page.bin | tr -d '\n' | grep -oE '[^fF]' | wc -l)
          if [ "$NON_FF_COUNT" -ne 0 ]; then
          echo "‚ùå ppn=$i ÌéòÏù¥ÏßÄÍ∞Ä 0xFFÎ°ú ÏôÑÏ†ÑÌûà Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!"
          hexdump -C check_page.bin | head -n 4
          exit 1
          fi
          done
          echo "‚úÖ erase-block-test ÌÜµÍ≥º: Î∏îÎ°ù 3 Ï†ÑÏ≤¥Í∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê® (0xFF)"

      - name: In-place update
        run: |
          gcc ftlmgr.c fdevicedriver.c -o a.out
          
          ./a.out c flashmemory 10
          ./a.out w flashmemory 5 "abc123" "42"
          
          ./a.out u flashmemory 5 "abcd6789@%$" "30"
          
          echo "ppn=5Ïóê sectorÏôÄ spareÍ∞Ä Ï†ïÌôïÌûà Í∞±Ïã†ÎêêÎäîÏßÄ ÌôïÏù∏"
          dd if=flashmemory bs=528 skip=5 count=1 of=check_page.bin status=none
          
          # sector ÌôïÏù∏ (ASCII ‚Üí HEX)
          EXPECT_SECTOR_HEX=$(echo -n "abcd6789@%$" | xxd -p | tr -d '\n')
          ACTUAL_SECTOR_HEX=$(xxd -p check_page.bin | tr -d '\n' | cut -c1-${#EXPECT_SECTOR_HEX})
          
          if [ "$EXPECT_SECTOR_HEX" != "$ACTUAL_SECTOR_HEX" ]; then
          echo "‚ùå ÏÑπÌÑ∞ Î∂àÏùºÏπò!"
          echo "Expected: $EXPECT_SECTOR_HEX"
          echo "Actual  : $ACTUAL_SECTOR_HEX"
          hexdump -C check_page.bin | head -n 4
          exit 1
          fi
          
          # spare ÌôïÏù∏ (Ï†ïÏàòÌòïÏúºÎ°ú Ï†ÄÏû•ÎêêÎã§Í≥† Í∞ÄÏ†ï ‚Üí 4Î∞îÏù¥Ìä∏ Í∏∞Ï§Ä)
          EXPECT_SPARE_HEX=$(printf "%08x" 30 | sed 's/../& /g' | awk '{print $4$3$2$1}')
          SPARE_HEX=$(xxd -p check_page.bin | tr -d '\n' | cut -c1025-1032)
          
          if [ "$SPARE_HEX" != "$EXPECT_SPARE_HEX" ]; then
          echo "‚ùå Ïä§ÌéòÏñ¥ Î∂àÏùºÏπò!"
          echo "Expected: $EXPECT_SPARE_HEX"
          echo "Actual  : $SPARE_HEX"
          hexdump -C check_page.bin | head -n 4
          exit 1
          fi
          
          echo "‚úÖ In-place update ÌÖåÏä§Ìä∏ ÌÜµÍ≥º: ppn=5Ïùò sector/spare Ï†ïÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏Îê®"